### YamlMime:AzureCLIGroup
uid: swa
name: swa
directCommands:
- uid: swa_login
  name: swa login
  summary: Log in to Azure
  status: GA
  sourceType: SWA Core
  description: 'Authenticate with Azure to get a deployment token for Azure Static Web Apps, using the `swa deploy` command.'
  syntax: >-
    swa login
              [--subscription-id]
              [--resource-group]
              [--tenant-id]
              [--client-id]
              [--client-secret]
              [--app-name]
              [--clear-credentials]
              [--use-keychain]
              [--no-use-keychain]
  examples:
  - summary: Interactive log in to Azure
    syntax: swa login
  optionalParameters:
  - name: --subscription-id, -S
    summary: Azure subscription ID used by this project. The default is `process.env.AZURE_SUBSCRIPTION_ID`.
  - name: --resource-group, -R
    summary: Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
  - name: --tenant-id, -T
    summary:  Azure tenant ID. The default is `process.env.AZURE_TENANT_ID`.
  - name: --client-id, -C
    summary:  Azure client ID.
  - name: --client-secret, -CS
    summary:  Azure client secret.
  - name: --app-name, -n
    summary:  Azure Static Web Apps app name.
  - name: --clear-credentials -cc
    summary: Clear persisted credentials before login. The default is `false`.
  - name: --use-keychain, -u
    summary: Use the operating system native keychain for persistent credentials. The default is `true`.
  - name: --no-use-keychain, -nu
    summary: Disable use of the operating system native keychain.
- uid: swa_init
  name: swa init
  summary: Configures a new Azure Static Web Apps project.
  status: GA
  sourceType: SWA Core
  description: >-
    Configures a new Azure Static Web Apps project with the Static Web Apps CLI. Interactive mode prompts you for a configuration name, will detect your project settings and the frameworks used. Once complete, a new static web app is created and a swa-cli.config.json file is generated in the current directory.

    You can run `swa init` multiple times to create different configurations for your project. You may want to do this if you're working on a monorepo and want to configure different projects.

    The generated configuration file is used in every command you run with the Static Web Apps CLI. If you have multiple named configurations, you can use the positional argument or `--config-name` option to specify which configuration you want to use.

    The following is an example configuration generated by the `init` command:

    ```json
    {
      "$schema": "https://aka.ms/azure/static-web-apps-cli/schema",
      "configurations": {
        "myApp": {
          "appLocation": ".",
          "apiLocation": "api",
          "outputLocation": "dist",
          "appBuildCommand": "npm run build",
          "apiBuildCommand": "npm run build --if-present",
          "run": "npm run dev",
          "appDevserverUrl": "http://localhost:8080"
        }
      }
    }
    ```
  syntax: >-
    swa init
              [--yes]
  examples:
  - summary: Create a new configuration interactively.
    syntax: swa init
  - summary: Create a new configuration using default values for all options.
    syntax: swa init --yes
  - summary: Initialize the project using the configuration named "myApp" from the swa-cli.config.json file.
    syntax: swa init --config-name myApp
  optionalParameters:
  - name: --yes, -y
    summary: Answers "yes" to all prompts, which disables interactive mode. Default is `false`.
- uid: swa_start
  name: swa start
  summary: Start the Azure Static Web Apps emulator from a directory or bind to a running dev server.
  status: GA
  sourceType: SWA Core
  description: >-
    ### Serve from a folder

    By default, the CLI starts and serves any static content from the current working directory `./`:

      ```azstatic-cli
      swa start
      ```

    If the artifact folder of your static app is under a different folder (for example, `./my-dist`), then run the CLI and provide that folder:

      ```azstatic-cli
      swa start ./my-dist
      ```

    ### Serve from a dev server

    When developing your front-end app locally, it's often useful to use the dev server that comes with your front end framework's CLI. Using the framework CLI allows you to use built-in features like "livereload" and HMR (hot module replacement).

    To use SWA CLI with your local dev server, follow these two steps:

    1. Start your local dev server as usual. For example, if you are using Angular: `ng serve` (or `npm start`).
    
    1. In a separate terminal, run `swa start` with the URI provided by the dev server, in the following format:

      ```azstatic-cli
      swa start http://<APP_DEV_SERVER_HOST>:<APP_DEV_SERVER_PORT>
      ```

    Here is a list of the default ports and commands used by some popular dev servers:

      | Tool | Port | Command |
      |--|--|--|
      | [Angular](https://angular.io/cli) | `4200` | `swa start http://localhost:4200` |
      | [Blazor WebAssembly](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor) | `5000` | `swa start http://localhost:5000` |
      | [Gatsby](https://www.gatsbyjs.com/docs/reference/gatsby-cli/) | `8000` | `swa start http://localhost:8000` |
      | [Hugo](https://gohugo.io/commands/hugo_server/) | `1313` | `swa start http://localhost:1313` |
      | [Next.js](https://nextjs.org/) | `3000` | `swa start http://localhost:3000` |
      | [React (Create React App)](https://reactjs.org/docs/create-a-new-react-app.html) | `3000` | `swa start http://localhost:3000` |
      | [Svelte (sirv-cli)](https://github.com/lukeed/sirv/tree/master/packages/sirv-cli/) | `5000` | `swa start http://localhost:5000` |
      | [Vue](https://github.com/vuejs/create-vue) | `3000` | `swa start http://localhost:3000` |

    Instead of starting a dev server separately, you can provide the startup command to the CLI.

      ```azstatic-cli
      # npm start script (React)
      swa start http://localhost:3000 --run "npm start"

      # dotnet watch (Blazor)
      swa start http://localhost:5000 --run "dotnet watch run"

      # Jekyll
      swa start http://localhost:4000 --run "jekyll serve"

      # custom script
      swa start http://localhost:4200 --run "./startup.sh"
      ```

    Then access the application with the emulated services from `http://localhost:4280`

    ### Serve both the front-end app and API

    If your project includes API functions, the CLI will check if the Azure Functions Core Tools are installed and available. If not, the CLI will download and install the right version of the Azure Functions Core Tools.

    #### Start the API server automatically

    Run the CLI and provide the folder that contains the API backend (a valid Azure Functions App project):

      ```azstatic-cli
      # static content plus an API
      swa start ./my-dist --api-location ./api

      # front-end dev server plus an API
      swa start http://localhost:3000 --api-location ./api
      ```

    #### Start API server manually

    When developing your backend locally, sometimes it's useful to run Azure Functions Core Tools separately to serve your API. This allows you to use built-in features like debugging and rich editor support.

    To use the CLI with your local API backend dev server, follow these two steps:

    1. Start your API using Azure Functions Core Tools: `func host start` or start debugging in VS Code.

    2. In a separate terminal, run the SWA CLI with the `--api-location` flag and the URI of the local API server, in the following format:

      ```azstatic-cli
      swa start ./my-dist --api-location http://localhost:7071
      ```
    
    #### Database connections

    To start your application with a [database connection](database-overview.md), use the `--data-api-location` parameter and point to the folder containing the *staticwebapp.database.config.json* file. 

      ```azstatic-cli
      swa start ./src --data-api-location swa-db-connections
      ```

  examples:
  - summary: Start the application with defaults.
    syntax: swa start
  - summary: Start the application with a front end dev server.
    syntax: swa start http://<APP_DEV_SERVER_HOST>:<APP_DEV_SERVER_PORT>
  - summary: Start the application with a front end and back end dev server.
    syntax: swa start http://<APP_DEV_SERVER_HOST>:<APP_DEV_SERVER_PORT> --api-location http://localhost:7071
  optionalParameters:
  - name: --app-location, -a <PATH>
    summary: The folder containing the source code of the front end application. Default is `.`.
  - name: --api-location, -i <PATH>
    summary: The folder containing the source code of the API application.
  - name: --output-location, -O <PATH>
    summary: The folder containing the built source of the front end application. The path is relative to `--app-location`. Default is `.`.
  - name: --data-api-location
    summary: The folder containing the *staticwebapp.database.config.json* file.
  - name: --app-devserver-url, -D <URL>
    summary: Connect to the app dev server at this URL instead of using output location.
  - name: --api-devserver-url, -is <URL>
    summary: Connect to the API server at this URL instead of using output location.
  - name: --api-port, -j <API_PORT>
    summary: The API server port passed to `func start`. Default is 7071.
  - name: --host, -q <HOST>
    summary: The host address used for the CLI dev server. Default is `localhost`.
  - name: --port, -p <PORT>
    summary: The port value to use for the CLI dev server. Default `4280`.
  - name: --ssl, -s
    summary: Serve the front end application and API over HTTPS. Default is `false`.
  - name: --ssl-cert, -e <SSL_CERT_LOCATION>
    summary: The SSL certificate (.crt) used when enabling HTTPS.
  - name: --ssl-key, -k <SSL_KEY_LOCATION>
    summary: The SSL key (.key) used when enabling HTTPS.
  - name: --run, -r <STARTUP_SCRIPT>
    summary: Location of a custom shell command or script file to run at startup.
  - name: --devserver-timeout, -t <TIME>
    summary: The amount of time to wait (in seconds) when connecting to a front end application's dev server or an API server. Default is 60.
  - name: --swa-config-location, -w <SWA_CONFIG_FILE_LOCATION>
    summary: The directory location of the `staticwebapp.config.json` file.
  - name: --open, -o
    summary: Open the browser to the dev server. Default is false.
  - name: --func-args, -f <FUNCTION_ARGUMENTS>
    summary: Pass additional arguments to the `func start` command.
- uid: swa_build
  name: swa build
  status: GA
  sourceType: SWA Core
  summary: Builds the application. If you have a Node.js application, it will install dependencies first.
  description: >-
    Common use cases include: installing dependencies for the front-end app and API and running the build commands for both, only building the front-end or API project if the other doesn't have a build step.
  syntax: >-
    swa build
              [--app-location]
              [--api-location]
              [--output-location]
              [--app-build-command]
              [--api-build-command]
              [--auto]
  examples:
  - summary: Build the app, and optionally install dependencies.
    syntax: swa build
  - summary: Detect how to build your app and run build commands after installing dependencies.
    syntax: swa build --auto
  - summary: Install dependencies for the front-end application.
    syntax: swa build --app-location ./client
  - summary: Use the configuration named `myApp` in *swa-cli.config.json* to build your front-end application.
    syntax: swa build myApp
  optionalParameters:
  - name: --app-location, -a
    summary: The folder containing the source code of the front-end application. Default is `.`.
  - name: --api-location, -i
    summary: The folder containing the source code of the API application.
  - name: --output-location, -O
    summary: The folder containing the built source of the front-end application. This path is relative to `--app-location`. Default is `.`.
  - name: --app-build-command, -A
    summary: Builds the front-end application.
  - name: --api-build-command, -I
    summary: Builds the API application.
  - name: --auto
    summary: Automatically detects how to build your front-end and API applications. Default is `false`.
- uid: swa_deploy
  name: swa deploy
  status: GA
  sourceType: SWA Core
  summary: Deploy the current project to Azure Static Web Apps.
  description: >-
    Common use cases include:

    1. Deploy a front end app without an API

    1. Deploy a front end app with an API

    1. Deploy a Blazor app

    ### Deployment token

    The SWA CLI supports deploying using a deployment token. This is often useful when deploying from a CI/CD environment. You can get a deployment token either from:

    - The [Azure portal](https://portal.azure.com/): **Home → Static Web App → Your Instance → Overview → Manage deployment token**

    - If you are using the [Azure CLI](https://aka.ms/azcli), you can get the deployment token of your project using the following command:

      ```azstatic-cli
      az staticwebapp secrets list --name <APPLICATION_NAME> --query "properties.apiKey"
      ```

    - If you are using the Azure Static Web Apps CLI, you can use the following command:

      ```azstatic-cli
      swa deploy --print-token
      ```

      You can then use that value with the `--deployment-token <TOKEN>` or you can create an environment variable called `SWA_CLI_DEPLOYMENT_TOKEN` and set it to the deployment token.

      > **Important**: Don't store the deployment token in a public repository. This value must remain a secret.

    ### Deploy a front end app without an API

    You can deploy a front end application without an API to Azure Static Web Apps by running the following steps:

    1. If your front-end application requires a build step, run `swa build` or refer to your application build instructions.
    <br><br>
    **Option 1:** From build folder you would like to deploy, run the deploy command:

      ```azstatic-cli
      cd build/
      swa deploy
      ```

    > **Note**: The `build` folder must contain the static content of your app that you want to deploy.

    **Option 2:** You can also deploy a specific folder:

    1. If your front end application requires a build step, run `swa build` or refer to your application build instructions.

    2. Deploy your app:

      ```azstatic-cli
      swa deploy ./my-dist
      ```

    ### Deploy a front-end app with an API

    To deploy both the front end app and an API to Azure Static Web Apps, use the following steps:

    1. If your front end application requires a build step, run `swa build` or refer to your application build instructions.

    2. Make sure the API language runtime version in the `staticwebapp.config.json` file is set correctly, for example:

      ```json
      {
        "platform": {
          "apiRuntime": "node:16"
        }
      }
      ```

      > **Note**: If your project doesn't have any `staticwebapp.config.json` file, add one under your `outputLocation` folder.

    1. Deploy your app:

      ```azstatic-cli
      swa deploy ./my-dist --api-location ./api
      ```

    ### Deploy a Blazor app

    To deploy a Blazor app with an optional API to Azure Static Web Apps, use the following steps:

    1. Build your Blazor app in **Release** mode:

      ```azstatic-cli
      dotnet publish -c Release -o bin/publish
      ```

    2. From the root of your project, run the `deploy` command:

      ```azstatic-cli
      swa deploy ./bin/publish/wwwroot --api-location ./Api
      ```

    ### Deploy using the `swa-cli.config.json`

    > **Note**: The path for `outputLocation` must be relative to the `appLocation`.

    If you are using a `swa-cli.config.json` configuration file in your project and have a single configuration entry, use a configuration like this:

      ```json
      {
        "configurations": {
          "my-app": {
            "appLocation": "./",
            "apiLocation": "api",
            "outputLocation": "frontend",
            "start": {
              "outputLocation": "frontend"
            },
            "deploy": {
              "outputLocation": "frontend"
            }
          }
        }
      }
      ```

    Then you can deploy your application by running the following steps:

    1. If your front-end application requires a build step, run `swa build` or refer to your application build instructions.

    2. Deploy your app:

      ```azstatic-cli
      swa deploy
      ```

    If you have multiple configuration entries, you can provide the entry ID to specify which one to use:

      ```azstatic-cli
      swa deploy my-otherapp
      ```

  syntax: >-
    swa deploy
              [--yes]
  examples:
  - summary: Deploy using a deployment token.
    syntax: swa deploy ./dist/ --api-location ./api/ --deployment-token <TOKEN>
  - summary: Deploy using a deployment token from the environment variables
    syntax: SWA_CLI_DEPLOYMENT_TOKEN=123 swa deploy ./dist/ --api-location ./api/
  - summary: Deploy using `swa-cli.config.json` file
    syntax: >-
      swa deploy
      swa deploy myconfig
  - summary: Print the deployment token
    syntax: swa deploy --print-token
  - summary: Deploy to a specific environment
    syntax: swa deploy --env production
- uid: swa_db
  name: swa db
  status: GA
  sourceType: SWA Core
  summary: Generate and edit your Static Web Apps database connections configuration. 
  description: >-
    Use `swa db init` to generate a sample *swa-db-connections* folder, along with a *staticwebapp.database.config.json* configuration file. If you are using a Cosmos DB for NoSQL database, this will also generate a sample *staticwebapp.database.schema.gql* schema file. 
  syntax: >-
    swa db init --database-type <DATABASE_TYPE>
  examples:
  - summary: Generate a sample database connection configuration folder for an Azure SQL database.
    syntax: swa db init --database-type mssql 
  optionalParameters:
  - name: --database-type, -t <DATABASE_TYPE>
    summary: (Required) The type of the database you want to connect (mssql, postgresql, cosmosdb_nosql, mysql).
  - name: --folder-name, -f <FOLDER_NAME>
    summary: A folder name to override the convention database connection configuration folder name (ensure that you update your CI/CD workflow files accordingly). The default value is `swa-db-connections`.
  - name: ---connection-string, -cs <CONNECTION_STRING>
    summary: The connection string of the database you want to connect.
  - name: --cosmosdb_nosql-database, -nd <COSMOSDB_NOSQL_DATABASE>
    summary: The database of your Cosmos DB account you want to connect (only needed if using cosmosdb_nosql database type).
  - name:  --cosmosdb_nosql-container, -nc <COSMOSDB_NOSQL_CONTAINER>
    summary:  The container of your cosmosdb account you want to connect.
  - name: --help, -h
    summary: Display help for command.
globalParameters:
- name: --version, -v
  summary: Display the version number.
- name: --verbose, --V [level]
  summary: Enable verbose output. Level values include `silly`, `info`, `log` (default), and `silent`.
- name: --config, -c [path]
  summary: Path to the swa-cli.config.json file.
- name: --config-name, -cn
  summary: Configuration used by the CLI.
- name: --print-config, -g
  summary: Print all resolved options. Default is `false`.
- name: --help, -h
  summary: Show context-sensitive help.
commands:
- swa_login
- swa_build
- swa_start
- swa_deploy
- swa_db
metadata:
  description: Azure Static Web Apps CLI
